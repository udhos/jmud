#! /usr/bin/perl -w
#
# lang.pl

sub build_class {
    my ($filepath) = @_;
    my %lang;

    #
    # Le arquivo e constroi mapa %lang.
    #
    {
	local *IN;
	if (!open(IN, "<$filepath")) {
	    warn "Can't open file for reading: '$filepath': $!";
	    return;
	}

	my ($st_bk, $st_k, $st_ak, $st_bv, $st_v, $st_av) = (1, 2, 3, 4, 5, 6);

	my $st = $st_bk;
	my ($rd, $ch, $key, $val);
      WHILE: while ($rd = read(IN, $ch, 1)) {
	  if ($rd != 1) {
	      warn "Error reading from file: '$filepath': $!";
	      last;
	  }

	  #print "$st: '$ch'\n";

	SWITCH: {
	    ($st == $st_bk) && do {
		if ($ch =~ /\s/) {
		    last;
		}
		if ($ch =~ /\w/) {
		    $st = $st_k;
		    $key = $ch;
		    last;
		}
		die "Unexpected char '$ch' at state $st";
	    };
	    ($st == $st_k) && do {
		if ($ch =~ /\w/) {
		    $key .= $ch;
		    last;
		}
		if ($ch =~ /\s/) {
		    $st = $st_ak;
		    last;
		}
		if ($ch =~ /=/) {
		    $st = $st_bv;
		    last;
		}
		die "Unexpected char '$ch' at state $st";
	    };
	    ($st == $st_ak) && do {
		if ($ch =~ /\s/) {
		    last;
		}
		if ($ch =~ /=/) {
		    $st = $st_bv;
		    last;
		}
		die "Unexpected char '$ch' at state $st";
	    };
	    ($st == $st_bv) && do {
		if ($ch =~ /\s/) {
		    last;
		}
		if ($ch =~ /\"/) {
		    $st = $st_v;
		    $val = '';
		    last;
		}
		die "Unexpected char '$ch' at state $st";
	    };
	    ($st == $st_v) && do {
		if ($ch !~ /\"/) {
		    $val .= $ch;
		    last;
		}
		if ($ch =~ /\"/) {
		    $st = $st_av;
		    #print "$key = \"$val\"\n";
		    if (exists($lang{$key})) {
			warn "Redefined reference in file '$filepath': $key\n";
		    }
		    $lang{$key} = [0, $val];
		    last;
		}
		die "Unexpected char '$ch' at state $st";
	    };
	    ($st == $st_av) && do {
		if ($ch =~ /\s/) {
		    last;
		}
		if ($ch =~ /\;/) {
		    $st = $st_bk;
		    last;
		}
		die "Unexpected char '$ch' at state $st";
	    };
	}
      }
	close IN;
    }

    #
    # Resolve referencias cruzadas no mapa %lang.
    #
    {
	my $pat_bef = '\$\{';
	my $pat_aft = '\}';
	my $pattern = $pat_bef . '(\w+)' . $pat_aft;
	my $repeat;
	do {
	    $repeat = 0;
	    my ($k, $v);
	    while (($k, $v) = each %lang) {
		my ($done, $val) = @{$v};
		if ($done) {
		    next;
		}
		if ($val =~ /$pattern/) {
		    my $subkey = $1;
		    if (exists($lang{$subkey})) {
			my ($sd, $sv) = @{$lang{$subkey}};
			if ($sd) {
			    my $pat = $pat_bef . $subkey . $pat_aft;
			    $v->[1] =~ s/$pat/$sv/g;
			    $repeat = 1;
			}
		    }
		    else {
			warn "Undefined reference in file '$filepath': $subkey\n";
		    }
		}
		else {
		    $v->[0] = 1;
		    $repeat = 1;
		}
	    }
	} while ($repeat);
    }

    #
    # Informa referencias pendentes (que nao puderam ser resolvidas) 
    # do mapa %lang.
    #
    {
	my ($k, $v);
	while (($k, $v) = each %lang) {
	    my ($done, $val) = @{$v};
	    if (!$done) {
		warn "Pending reference in file '$filepath': $k\n";
	    }
	}
    }

    #
    # Gera classe para o mapa %lang.
    #
    {
	my $classname = `basename $filepath`;
	chomp $classname;
	my $classfile = "$classname.java";

	my @key_list = keys %lang;

	local *OUT;
	if (!open(OUT, ">$classfile")) {
	    warn "Can't open file for writing: '$filepath': $!";
	    return;
	}

#
# class header
#
	print OUT <<__EOF__;
/*
  File: $classfile
  
  DO NOT EDIT THIS FILE. This is an automatically generated file.
  Changes to this file will be lost.
 */

package jmud.lang;

public class Lang {

__EOF__

    my $k;
    my $i = 0;
    foreach $k (@key_list) {
        my ($done, $val) = @{$lang{$k}};
	print OUT "  static public final String $k = \"$val\";\n";
	++$i;
    }

#
# class footer
#
print OUT <<__EOF__;

}

/*
  File: $classfile
  
  DO NOT EDIT THIS FILE. This is an automatically generated file.
  Changes to this file will be lost.
*/
__EOF__

    close OUT;
    }

}

foreach $arg (@ARGV) {
    build_class($arg);
}
